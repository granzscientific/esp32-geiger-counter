# ESPHome config file

substitutions:
  # Multiplier to get uSv/Hour with SBM-20 tube is "0.00570"
  # Multiplier to get uSv/Hour with J305 tube is "0.00332"
  tube_multiplier: "0.00570"
  # How often to read pulse counter and update status
  update_interval: 1s
  # Number of samples to average: Multiply update_interval by this for total averaging period: 5s*5 = 25s
  moving_avg_samples: "30"

esphome:
  name: geiger-counter
  friendly_name: geiger-counter
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB
  on_boot:
    priority: -100 # only run after everything else is up and running
    then:
      - output.turn_on: boostctrl
      - output.ledc.set_frequency:
          id: boostctrl
          frequency: "490Hz"
      - output.set_level:
          id: boostctrl
          level: "10%" #"50%"
      - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'

i2c:
  sda: GPIO2
  scl: GPIO1
  #scan: True

# Configure the PWM outputs to drive the boost converter and the buzzer
# Note: We must specify channel to use for each output to avoid the buzzer out changing the boost converter frequency
output:
  - platform: ledc
    pin: GPIO4
    channel: 4
    id: boostctrl
  - platform: ledc
    pin: GPIO0
    channel: 0
    id: buzzer_out

rtttl:
  output: buzzer_out
  id: buzzer
  gain: 50%

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    #type: esp-idf
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    # Go here to generate a new API encryption key: https://esphome.io/components/api.html
    key: "lORY1FGGngyyVsuXNoEmg+ubheP6hLtkb6sr6t87ylI="

ota:
  - platform: esphome
    password: "123456"
    # Use:
    #password: !secret ota_password
    # or hardcoded ota password for production

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geiger-Counter"
    password: "123456789"

web_server:
  port: 80

captive_portal:

# Enable the addressable RGB LED on GPIO8
light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO8
    num_leds: 1
    default_transition_length: 0.1s
    internal: true  # Don't expose this to Home Assistant
    name: "Ionizing Radiation Power Indicator"
    id: indicator_light

sensor:
  - platform: bme680
    temperature:
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      name: "BME680 Pressure"
    humidity:
      name: "BME680 Humidity"
    gas_resistance:
      name: "BME680 Gas Resistance"
    address: 0x76
    update_interval: 5s
  # Count pulses from GM tube
  - platform: pulse_counter
    pin:
      number: GPIO21
      inverted: false
    unit_of_measurement: 'uSv/Hour'
    name: 'Ionizing Radiation Power'
    count_mode:
      rising_edge: DISABLE
      falling_edge: INCREMENT
    update_interval: ${update_interval}
    accuracy_decimals: 5
    id: dose_meter
    filters:
      - sliding_window_moving_average: # num-samples at update_interval above moving average here
          window_size: ${moving_avg_samples}
          send_every: 1
      - multiply: ${tube_multiplier}
    # Adjust the indicator LED based on current rad level
    on_value_range:
      - below: 0.25
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 20%
              red: 0%
              green: 100%
              blue: 0%
      - above: 0.26
        below: 0.50
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 20%
              red: 20%
              green: 80%
              blue: 0%
      - above: 0.51
        below: 0.75
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 30%
              red: 30%
              green: 70%
              blue: 0%
      - above: 0.76
        below: 1.00
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 40%
              red: 50%
              green: 50%
              blue: 0%
      - above: 1.01
        below: 1.25
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 50%
              red: 75%
              green: 25%
              blue: 0%
      - above: 1.26
        below: 1.5
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 60%
              red: 80%
              green: 20%
              blue: 0%
      - above: 1.51
        below: 2.00
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 80%
              red: 100%
              green: 0%
              blue: 0%
      - above: 2.01
        then:
          - light.turn_on:
              id: indicator_light
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
  # Integrate total dose
  - platform: integration
    name: "Total Ionizing Radiation Dose"
    unit_of_measurement: "uSv"
    sensor: dose_meter # link entity-id to the pulse_counter values above
    icon: "mdi:radioactive"
    accuracy_decimals: 5
    time_unit: min # integrate values every next minute
    filters:
      # Multiplier for total dose
      # To convert from uSv/hour to uSv/minute: (uSv/h / 60) = (uSv/h * 0.0166666667)
      # If dose_meter in CPM: (0.0057 / 60 minutes) = 0.000095; so CPM * 0.000095 = dose every next minute, uSv
      - multiply: 0.0166666667

